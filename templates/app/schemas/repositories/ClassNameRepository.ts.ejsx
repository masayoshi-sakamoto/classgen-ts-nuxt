import { NuxtCookies } from 'cookie-universal-nuxt'
import { Store } from 'vuex'
import { RootState } from '@/store'
import * as types from '@/store/<%= class_name %>/types'
import { IOptionsProps } from '@/entities/Options'
import { I<%= ClassName %>Props } from '@/entities/<%= ClassName %>'
import { IQueryProps } from '@/entities/Query'

export default class <%= ClassName %>Repository {
  private cookies: NuxtCookies
  private store: Store<RootState>

  constructor(cookies: NuxtCookies, store: Store<RootState>) {
    this.cookies = cookies
    this.store = store
  }

  get fetched(): I<%= ClassName %>Props[] {
    return this.store.state.<%= className %>.fetched
  }

  set fetched(value: I<%= ClassName %>Props[]) {
    this.store.commit(new types.Fetched(value))
    this.store.commit(new types.Store(value))
  }

  get items() {
    return this.store.state.<%= className %>.byIds
  }

  set query(value: IQueryProps) {
    this.store.commit(new types.Query(value))
  }

  get query(): IQueryProps {
    return this.store.state.<%= className %>.query
  }

  set options(value: IOptionsProps) {
    this.store.commit(new types.Options(value))
  }

  get options(): IOptionsProps {
    return this.store.state.<%= className %>.options
  }

  set loading(value: boolean) {
    this.store.commit(new types.Loading(value))
  }

  get loading(): boolean {
    return this.store.state.<%= className %>.loading
  }

  set current(value: I<%= ClassName %>Props) {
    this.store.commit(new types.Current(value))
  }

  get current(): I<%= ClassName %>Props {
    return this.store.state.<%= className %>.current
  }

  set reset(value: boolean) {
    this.store.commit(new types.Reset(value))
  }

  get reset(): boolean {
    return this.store.state.<%= className %>.reset
  }

  /**
   * orderカラムを持っていてソート機能を使う場合はコメントアウトしてください
   *
  get sortable(): I<%= ClassName %>Props[] {
    return Object.values(this.store.state.<%= className %>.byIds).sort((a, b) => {
      return a.order > b.order ? 1 : a.order < b.order ? -1 : 0
    })
  }

  set sortable(value: I<%= ClassName %>Props[]) {
    let i = 1
    const v = JSON.parse(JSON.stringify(value)).map((props: any) => {
      props.order = i++
      return props
    })
    this.store.commit(new types.Store(v))
  }
  */

  update(value: I<%= ClassName %>Props) {
    this.store.commit(new types.Update(value))
  }
}
