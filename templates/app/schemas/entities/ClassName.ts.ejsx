<%_ const model = models.find((prop) => prop.ClassName === ClassName) _%>
<%_ if (model) { _%>
  <%_ for (const ref of model.refs) { _%>
  <%_ const name = upperCamel(ref.name) _%>
import <%= name %>Entity, { I<%= name %>Props } from '@/entities/<%= name %>'
  <%_ } _%>
<%_ } _%>
  
export interface I<%= ClassName %>Props {
<%_ if (model) { _%>
  <%_ for (const schema of Object.values(model.schema)) { _%>
    <%_ const property = schema.required && schema.key !== 'id' ? lowerCamel(schema.key) : lowerCamel(schema.key) + '?' _%>
    <%_ const type = schema.ref ? `I${schema.tstype}Props` : schema.format === 'json' ? 'any' : schema.tstype  _%>
  <%= property %>: <%= type %>
  <%_ } _%>
<%_ } _%>
}

export default class <%= ClassName %>Entity {
  private _props: I<%= ClassName %>Props

  constructor(props: I<%= ClassName %>Props) {
    this._props = props
  }

  get props(): I<%= ClassName %>Props {
    return this._props
  }

  get clone(): I<%= ClassName %>Props {
    return JSON.parse(JSON.stringify(this._props))
  }
<%_ if (model) { _%>
  <%_ for (const schema of Object.values(model.schema)) { _%>
    <%_ const type = schema.ref ? `${schema.tstype}Entity` : schema.format === 'json' ? 'any' : schema.tstype _%>
    
  get <%= lowerCamel(schema.key) %>(): <%= type %><%= !schema.required || schema.key === 'id' ? ' | undefined' : ''%> {
    <%_ if (schema.ref) { _%>
    return this._props.<%= lowerCamel(schema.key) %> ? new <%= schema.tstype %>Entity(this._props.<%= lowerCamel(schema.key) %>) : undefined
    <%_} else { _%>
    return this._props.<%= lowerCamel(schema.key) %>
    <%_ } _%>
  }
  <%_ } _%>
<%_ } _%>
}

export const headers = [
  { text: 'ID', value: 'id' },
<%_ if (model) { _%>
  <%_ for (const schema of Object.values(model.schema)) { _%>
    <%_ if (schema.title) { _%>
  { text: '<%= schema.title %>', value: '<%= lowerCamel(schema.key) %>' },
    <%_ } _%>
  <%_ } _%>
<%_ } _%>
]

export const Empty<%= ClassName %>PropsFactory = (props?: Partial<I<%= ClassName %>Props> | null): I<%= ClassName %>Props => ({
<%_ if (model) { _%>
  <%_ for (const schema of Object.values(model.schema)) { _%>
    <%_ if (schema.required && schema.key !== 'id') { _%>
    <%_ const value = schema.ref ? `Empty${schema.tstype}PropsFactory` : schema.format === 'json' ? '{}' : schema.default  _%>
  <%= lowerCamel(schema.key) %>: <%= value %>,
    <%_ } _%>
  <%_ } _%>
<%_ } _%>
  ...props
})
