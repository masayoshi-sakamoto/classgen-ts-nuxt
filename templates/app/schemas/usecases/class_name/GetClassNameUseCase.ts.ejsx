<%_ const key = Object.keys(paths).find((key) => key === ClassName) _%>
<%_ const path = key ? paths[key] : undefined _%>
<%_ 
let type = 'string'
if (path) { 
  const value = Object.values(path).find((prop) => {
    const id = prop.operationId.replace(ClassName, '')
    return id === 'Get'
  })
  type = value.parameters.schema.type
}
_%>
import { IApp } from '@/types/nuxt'
<%_ if (auth) { _%>
import refresh from '@/utils/refresh'
<%_ } _%>

export default class Get<%= ClassName %>UseCase implements BaseUseCase {
  App: IApp
  constructor(app: IApp) {
    this.App = app
  }

  async execute(id: <%= type %>) {
    try {
      <%_ if (auth) { _%>
      await refresh(this.App)
      <%_ } _%>
      const response = await this.App.<%= appName %>Gateway.<%= ClassName %>.Get<%= ClassName %>(id)
      this.App.<%= className %>.update(response)
    } catch (exception: any) {
      this.App.logService.handle(exception)
      return false
    }
    return true
  }
}
