import { <%= AppName %>, <%= ClassName %>Seed } from '@/infrastructure/network/<%= AppName %>/schema'
import { APIRequest } from '@/infrastructure/network/APIRequest'
import { HTTPMethod } from '@/infrastructure/network/types'
import { IQueryProps } from '@/entities/Query'
<%_ const key = Object.keys(paths).find((key) => key === ClassName) _%>
<%_ const path = key ? paths[key] : undefined _%>
<%_ if (path) { _%>
<%_ Object.values(path).forEach((prop) => { _%>

export class <%= prop.operationId %> implements APIRequest<<%= AppName %>.<%= ClassName %>.<%= prop.operationId %>Response> {
  response: <%= AppName %>.<%= ClassName %>.<%= prop.operationId %>Response
  path: string
  contentType = 'application/json'
  method = HTTPMethod.<%= prop.method %>
  <%_ const id = prop.operationId.replace(ClassName, '') _%>
  <%_ if ( id === 'Get') { _%>
  constructor(<%= prop.parameters ? 'id: '+prop.parameters.schema.type : '' %>) {
  <%_ } else if ( id === 'Fetch') { _%>
  params?: IQueryProps
  constructor(query?: IQueryProps) {
    this.params = query
  <%_ } else if ( id === 'Post') { _%>
  params: <%= AppName %>.<%= ClassName %>.<%= prop.operationId %>Request
  constructor(params: <%= ClassName %>Seed) {
    this.params = params
  <%_ } else if ( id === 'Put') { _%>
  params: <%= AppName %>.<%= ClassName %>.<%= prop.operationId %>Request
  constructor(params: <%= ClassName %>Seed) {
    const id = params.id
    this.params = params
  <%_ } else if ( id === 'Delete') { _%>
  constructor(id: string) {
  <%_ } else if ( id === 'Order') { _%>
  params: { order: <%= AppName %>.<%= ClassName %>.<%= prop.operationId %>Request[] }
  constructor(params: <%= ClassName %>Seed[]) {
    this.params = { order: params }
  <%_ } else  { _%>
  constructor() {
  <%_ } _%>
    this.path = `/<%= class_names %><%= prop.parameters ? '/${id}' : '' %>`
  }
}
<%_ }) _%>
<%_ } _%>
