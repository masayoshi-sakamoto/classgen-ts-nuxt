<%_ const key = Object.keys(paths).find((key) => key === ClassName) _%>
<%_ const path = key ? paths[key] : undefined _%>
<%_ if (path) { _%>
/* eslint camelcase: 0 */
import { <%= AppName %>GatewayBase } from './base'
import { to<%= ClassName %>Props, to<%= ClassName %>Seed } from './translator/<%= class_name %>'
import { optionsToQuery, toQueryProps } from './translator/query'
import { toOptionsProps } from './translator/options'
<%_ Object.values(path).forEach((prop) => { _%>
<%_ const id = prop.operationId.replace(ClassName, '') _%>
  <%_ if (id === 'Csv') { _%>
import { toCsvProps } from './translator/csv'
  <%_ } _%>
<%_ }) _%>
import { <%= Object.values(path).map((prop) => prop.operationId).join(', ') %> } from '@/infrastructure/network/<%= AppName %>/requests/<%= class_name %>'
import { I<%= ClassName %>Props, Empty<%= ClassName %>PropsFactory } from '@/entities/<%= ClassName %>'
import { IOptionsProps } from '@/entities/Options'

export default class <%= ClassName %> extends <%= AppName %>GatewayBase {
<%_ Object.values(path).forEach((prop) => { _%>
  <%_ const id = prop.operationId.replace(ClassName, '') _%>
  <%_ if ( id === 'Get') { _%>
  async <%= prop.operationId %>(<%= prop.parameters ? 'id: '+prop.parameters.schema.type : '' %>): Promise<I<%= ClassName %>Props> {
    const { <%= className %> } = await this.apiClient.request(new <%= prop.operationId %>(id)<%- type ? `, '${type}'` : ''  %>)
    return <%= className %> ? to<%= ClassName %>Props(<%= className %>) : Empty<%= ClassName %>PropsFactory()
  }
  <%_ } else if ( id === 'Fetch') { _%>

  async <%= prop.operationId %>(options?: IOptionsProps) {
  const response = await this.apiClient.request(new <%= prop.operationId %>(optionsToQuery(options))<%- type ? `, '${type}'` : ''  %>)
  return {
    items: response.<%= classNames %>.map((prop) => to<%= ClassName %>Props(prop)),
    query: toQueryProps(response.query),
    options: toOptionsProps(response.query)
  }
  }
  <%_ } else if ( id === 'Post') { _%>

  async Save<%= ClassName %>(props: I<%= ClassName %>Props) {
    const data = props.id ? new Put<%= ClassName %>(to<%= ClassName %>Seed(props)) : new Post<%= ClassName %>(to<%= ClassName %>Seed(props))
    const { <%= className %> } = await this.apiClient.request(data<%- type ? `, '${type}'` : ''  %>)
    return <%= className %> ? to<%= ClassName %>Props(<%= className %>) : Empty<%= ClassName %>PropsFactory()
  }
  <%_ } else if ( id === 'Delete') { _%>

  async Delete<%= ClassName %>(props: I<%= ClassName %>Props) {
    if (props.id) {
      await this.apiClient.request(new Delete<%= ClassName %>(props.id)<%- type ? `, '${type}'` : ''  %>)
    }
  }
  <%_ } else if ( id === 'Order') { _%>

  async Order<%= ClassName %>(props: I<%= ClassName %>Props[]) {
    await this.apiClient.request(new Order<%= ClassName %>(props.map((prop) => to<%= ClassName %>Seed(prop)))<%- type ? `, '${type}'` : ''  %>)
  }
  <%_ } else if ( id === 'Csv') { _%>

  async Csv<%= ClassName %>() {
    const { csvs } = await this.apiClient.request(new <%= prop.operationId %>()<%- type ? `, '${type}'` : ''  %>)
    return csvs.map((prop) => toCsvProps(prop))
  }
  <%_ } else if ( id === 'Download') { _%>

  async Download<%= ClassName %>(options?: IOptionsProps) {
    const { csv } = await this.apiClient.request(new Download<%= ClassName %>(optionsToQuery(options))<%- type ? `, '${type}'` : ''  %>)
    return await this.base64DecodeAsBlob(csv, 'text/csv;charset=UTF-8')
  }

  async base64DecodeAsBlob(text: string, type = 'text/plain;charset=UTF-8') {
    return await fetch(`data:${type};base64,` + text).then((response) => response.blob())
  }

  <%_ } _%>
<%_ }) _%>
}
<%_ } _%>