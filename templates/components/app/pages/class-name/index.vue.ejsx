<template>
  <TtemplateList
    :items="App.<%= className %>.fetched"
    :options.sync="App.<%= className %>.options"
    :query="App.<%= className %>.query"
    :headers="headers"
    @save="save"
    @remove="remove"
    @fetch="params"
  >
    <template #form="{ item }">
      <Form<%= ClassName %> :value="item" type="dialog" @input="value = $event"></Form<%= ClassName %>>
    </template>
  </TtemplateList>
</template>

<script lang="ts">
import Vue from 'vue'
import TtemplateList from '@/components/templates/List'
import Form<%= ClassName %> from '@/components/organisms/Form/<%= ClassName %>'
import { I<%= ClassName %>Props, headers } from '@/entities/<%= ClassName %>'
import Fetch<%= ClassName %>UseCase from '@/usecases/<%= className %>/Fetch<%= ClassName %>UseCase'
import Save<%= ClassName %>UseCase from '@/usecases/<%= className %>/Save<%= ClassName %>UseCase'
import Delete<%= ClassName %>UseCase from '@/usecases/<%= className %>/Delete<%= ClassName %>UseCase'

interface IData {
  headers: { text: string; value: any }[]
  value: I<%= ClassName %>Props | undefined
}

export default Vue.extend({
  components: {
    TtemplateList,
    Form<%= ClassName %>
  },
  data(): IData {
    return {
      headers,
      value: undefined
    }
  },
  async fetch() {
    if (this.App.<%= className %>.fetched.length === 0) {
      this.App.<%= className %>.options = {
        ...this.App.<%= className %>.options,
        ...this.$route.query
      }
      await this.fetch()
    }
  },
  methods: {
    async params() {
      this.$router.push({
        path: this.$route.path,
        query: { ...this.App.<%= className %>.options } as any
      })
      await this.fetch()
    },
    async fetch() {
      await new Fetch<%= ClassName %>UseCase(this.App).execute()
    },
    async save() {
      if (await new Save<%= ClassName %>UseCase(this.App).execute(this.value!)) {
        await this.fetch()
        this.App.data.dialog = false
      }
    },
    async remove(value: I<%= ClassName %>Props) {
      await new Delete<%= ClassName %>UseCase(this.App).execute(value!)
      await this.fetch()
    }
  }
})
</script>
