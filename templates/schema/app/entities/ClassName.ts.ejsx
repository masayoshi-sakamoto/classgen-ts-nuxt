<%_ const model = swagger.models.find((prop) => prop.name === ClassName) _%>
<%_ for (const ref of model.refs) { _%>
import <%= ref.name %>Entity, { I<%= ref.name %>Props } from '@/entities/<%= ref.name %>'
<%_ } _%>
  
export interface I<%= ClassName %>Props {
<%_ for (const schema of Object.values(model.schema)) { _%>
  <%= schema.required && schema.key !== 'id' ? lowerCamel(schema.key) : lowerCamel(schema.key)+'?' %>: <% if(schema.ref) { %>I<%= schema.tstype %>Props<% } else { %><%= schema.tstype %><% } %>
<%_ } _%>
}

export default class <%= ClassName %>Entity {
  private _props: I<%= ClassName %>Props

  constructor(props: I<%= ClassName %>Props) {
    this._props = props
  }

  get props(): I<%= ClassName %>Props {
    return this._props
  }

  get clone(): I<%= ClassName %>Props {
    return JSON.parse(JSON.stringify(this._props))
  }
  <%_ for (const schema of Object.values(model.schema)) { _%>
  
  get <%= lowerCamel(schema.key) %>(): <% if (schema.ref) { %><%= schema.tstype %>Entity<%} else { %><%= schema.tstype %><% } %><%= !schema.required || schema.key === 'id' ? ' | undefined' : '' %> {
    <%_ if (schema.ref) { _%>
    return this._props.<%= lowerCamel(schema.key) %> ? new <%= schema.tstype %>Entity(this._props.<%= lowerCamel(schema.key) %>) : undefined
    <%_} else { _%>
    return this._props.<%= lowerCamel(schema.key) %>
    <%_ } _%>
  }
  <%_ } _%>
}

export const headers = [
  { text: 'ID', value: 'id' },
  <%_ for (const schema of Object.values(model.schema)) { _%>
    <%_ if (schema.title) { _%>
  { text: '<%= schema.title %>', value: '<%= lowerCamel(schema.key) %>' },
    <%_ } _%>
  <%_ } _%>
]

export const Empty<%= ClassName %>PropsFactory = (props?: Partial<I<%= ClassName %>Props> | null): I<%= ClassName %>Props => ({
  <%_ for (const schema of Object.values(model.schema)) { _%>
    <%_ if (schema.required && schema.key !== 'id') {_%>
  <%= lowerCamel(schema.key) %>: <% if(schema.ref) { %>Empty<%= schema.tstype %>PropsFactory<% } else { %><%= schema.default %><% } %>,
    <%_ } _%>
  <%_ } _%>
  ...props
})
