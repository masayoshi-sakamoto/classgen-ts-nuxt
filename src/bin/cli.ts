import * as fs from 'fs'
import * as path from 'path'
import * as YAML from 'js-yaml'
import { Command } from 'commander'
import Generator from '../generator'

const pkg = require('../../package.json')
const commander = new Command()

commander
  .version(pkg.version)
  .option('--namespace <namespace>', 'application namespace')
  .option('-f, --force', 'output directory')
  .option('-s, --schema <file>', 'mysql dump file')
  .option('-d, --dist <dist>', 'output directory')
  .option('-t, --type <type>', 'template type choices (web, admin)')
  .option('--auth [model]', 'authenticate flag', 'users')
  .option('-m, --model <model>', 'model name')
  .option('-e, --excludes <excludes>', 'excludes column', (items) => items.split(','))
  .option('--without', 'without paths')

try {
  /**
   * 初期化処理
   */
  commander.command('initialize').action((options: any) => {
    new Generator(commander.opts()).initialize()
  })

  /**
   * swaggerからentityなどを作成
   */
  commander.command('schema').action((options: any) => {
    new Generator(commander.opts()).schema()
  })

  /**
   * インデックス作成
   */
  commander.command('index').action(() => {
    new Generator(commander.opts()).injector()
  })

  /**
   * swaggerからentityなどを作成
   */
  commander
    .command('typegen')
    .argument('<file>', 'swagger.yaml file')
    .action((file: string) => {
      if (!fs.existsSync(path.resolve(process.cwd(), file))) {
        throw new Error('File does not exist.')
      }
      const target = fs.readFileSync(path.resolve(process.cwd(), file), 'utf-8')
      const yaml = YAML.load(target) as any
      new Generator(commander.opts()).test(yaml)
    })

  /**
   * entity作成
   */
  commander
    .command('entity')
    .argument('<model>', 'generated by model name')
    .action((model: string) => {
      if (!model) {
        throw new Error('model is required.')
      }
      new Generator(commander.opts()).entity(model)
    })

  commander.parse(process.argv)
} catch (e) {
  console.error(e)
  process.exit(2)
}
